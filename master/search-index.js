var searchIndex = {};
searchIndex["gurobi"] = {"doc":"This crate provides primitive Rust APIs for Gurobi Optimizer.","items":[[3,"Env","gurobi","Gurobi environment object",null,null],[3,"Model","","Gurobi model object associated with certain environment.",null,null],[3,"Var","","Proxy object of a variables",null,null],[3,"Constr","","Proxy object of a linear constraint",null,null],[3,"QConstr","","Proxy object of a quadratic constraint",null,null],[3,"SOS","","Proxy object of a Special Order Set (SOS) constraint",null,null],[3,"LinExpr","","Linear expression of variables",null,null],[3,"QuadExpr","","Quadratic expression of variables",null,null],[3,"Context","","a",null,null],[4,"Error","","The error type for operations in Gurobi Rust API",null,null],[13,"FromAPI","","An exception returned from Gurobi C API",0,null],[13,"NulError","","See https://doc.rust-lang.org/std/ffi/struct.NulError.html",0,null],[13,"InconsitentDims","","Inconsistent argument dimensions",0,null],[13,"StringConversion","","String conversion error",0,null],[4,"VarType","","Type for new variable",null,null],[13,"Binary","","",1,null],[13,"Continuous","","",1,null],[13,"Integer","","",1,null],[4,"ConstrSense","","Sense for new linear/quadratic constraint",null,null],[13,"Equal","","",2,null],[13,"Greater","","",2,null],[13,"Less","","",2,null],[4,"ModelSense","","Sense of new objective function",null,null],[13,"Minimize","","",3,null],[13,"Maximize","","",3,null],[4,"SOSType","","Type of new SOS constraint",null,null],[13,"SOSType1","","",4,null],[13,"SOSType2","","",4,null],[4,"Status","","Status of a model",null,null],[13,"Loaded","","",5,null],[13,"Optimal","","",5,null],[13,"Infeasible","","",5,null],[13,"InfOrUnbd","","",5,null],[13,"Unbounded","","",5,null],[13,"CutOff","","",5,null],[13,"IterationLimit","","",5,null],[13,"NodeLimit","","",5,null],[13,"TimeLimit","","",5,null],[13,"SolutionLimit","","",5,null],[13,"Interrupted","","",5,null],[13,"Numeric","","",5,null],[13,"SubOptimal","","",5,null],[13,"InProgress","","",5,null],[4,"RelaxType","","Type of cost function at feasibility relaxation",null,null],[13,"Linear","","The weighted magnitude of bounds and constraint violations\n(`penalty(s_i) = w_i s_i`)",6,null],[13,"Quadratic","","The weighted square of magnitude of bounds and constraint violations\n(`penalty(s_i) = w_i s_i^2`)",6,null],[13,"Cardinality","","The weighted count of bounds and constraint violations\n(`penalty(s_i) = w_i * [s_i &gt; 0]`)",6,null],[5,"version","","Returns the version number of Gurobi",null,null],[11,"clone","gurobi::env::param::exports","",7,null],[11,"fmt","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","std::ffi::c_str","",14,{"inputs":[{"name":"intparam"}],"output":{"name":"cstring"}}],[11,"from","","",14,{"inputs":[{"name":"doubleparam"}],"output":{"name":"cstring"}}],[11,"from","","",14,{"inputs":[{"name":"stringparam"}],"output":{"name":"cstring"}}],[11,"from","","",14,{"inputs":[{"name":"intattr"}],"output":{"name":"cstring"}}],[11,"from","","",14,{"inputs":[{"name":"charattr"}],"output":{"name":"cstring"}}],[11,"from","","",14,{"inputs":[{"name":"doubleattr"}],"output":{"name":"cstring"}}],[11,"from","","",14,{"inputs":[{"name":"stringattr"}],"output":{"name":"cstring"}}],[11,"new","gurobi","Create an environment with log file",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"client","","Create a client environment on a computer server with log file",15,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"i32"},{"name":"f64"}],"output":{"name":"result"}}],[11,"new_model","","Create an empty model object associted with the environment",15,null],[11,"read_model","","Read a model from a file",15,null],[11,"get","","Query the value of a parameter",15,null],[11,"set","","Set the value of a parameter",15,null],[11,"read_params","","Import a set of parameter values from a file",15,null],[11,"write_params","","Write the set of parameter values to a file",15,null],[11,"message","","Insert a message into log file.",15,null],[11,"drop","","",15,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"get_where","","a",16,null],[11,"get_model","","a",16,null],[11,"get","","a",16,null],[11,"get_msg_string","","a",16,null],[11,"get_node_rel","","a",16,null],[11,"get_solution","","a",16,null],[11,"set_solution","","Provide a new feasible solution for a MIP model.",16,null],[11,"add_cut","","Add a new cutting plane to the MIP model.",16,null],[11,"add_lazy","","Add a new lazy constraint to the MIP model.",16,null],[11,"new","","",16,null],[11,"deref","","",16,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"into","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"into","","",2,null],[11,"fmt","","",3,null],[11,"into","","",3,null],[11,"fmt","","",4,null],[11,"into","","",4,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"status"}}],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"new","","Create an empty linear expression.",21,{"inputs":[],"output":{"name":"self"}}],[11,"add_term","","Add a linear term into the expression.",21,null],[11,"add_constant","","Add a constant into the expression.",21,null],[11,"get_value","","Get actual value of the expression.",21,null],[11,"into","","",21,null],[11,"clone","","",22,null],[11,"new","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"add_term","","Add a linear term into the expression.",22,null],[11,"add_qterm","","Add a quadratic term into the expression.",22,null],[11,"add_constant","","Add a constant into the expression.",22,null],[11,"get_value","","Get actual value of the expression.",22,null],[11,"mul","","",17,null],[11,"mul","","",22,null],[11,"add","","",21,null],[11,"sub","","",21,null],[11,"add","","",21,null],[11,"sub","","",21,null],[11,"add","","",22,null],[11,"sub","","",22,null],[11,"add","","",22,null],[11,"sub","","",22,null],[11,"add","","",21,null],[11,"fmt","","",6,null],[11,"into","","",6,null],[11,"new","","create an empty model which associated with certain environment.",23,null],[11,"copy","","create a copy of the model",23,null],[11,"fixed","","Create an fixed model associated with the model.",23,null],[11,"relax","","Create an relaxation of the model (undocumented).",23,null],[11,"presolve","","Perform presolve on the model.",23,null],[11,"feasibility","","Create a feasibility model (undocumented).",23,null],[11,"update","","Apply all modification of the model to process",23,null],[11,"optimize","","Optimize the model synchronously",23,null],[11,"optimize_async","","Optimize the model asynchronously",23,null],[11,"sync","","Wait for a optimization called asynchronously.",23,null],[11,"compute_iis","","Compute an Irreducible Inconsistent Subsystem (IIS) of the model.",23,null],[11,"terminate","","Send a request to the model to terminate the current optimization process.",23,null],[11,"reset","","Reset the model to an unsolved state.",23,null],[11,"tune","","Perform an automated search for parameter settings that improve performance on the model.\nSee also references [on official\nmanual](https://www.gurobi.com/documentation/6.5/refman/parameter_tuning_tool.html#sec:Tuning).",23,null],[11,"get_tune_result","","Prepare to retrieve the results of `tune()`.\nSee also references [on official\nmanual](https://www.gurobi.com/documentation/6.5/refman/parameter_tuning_tool.html#sec:Tuning).",23,null],[11,"get_concurrent_env","","Create/retrieve a concurrent environment for the model",23,null],[11,"discard_concurrent_envs","","Discard all concurrent environments for the model.",23,null],[11,"message","","Insert a message into log file.",23,null],[11,"read","","Import optimization data of the model from a file.",23,null],[11,"write","","Export optimization data of the model to a file.",23,null],[11,"add_var","","add a decision variable to the model.",23,null],[11,"add_vars","","add decision variables to the model.",23,null],[11,"add_constr","","add a linear constraint to the model.",23,null],[11,"add_constrs","","add linear constraints to the model.",23,null],[11,"add_range","","Add a range constraint to the model.",23,null],[11,"add_ranges","","Add range constraints to the model.",23,null],[11,"add_qconstr","","add a quadratic constraint to the model.",23,null],[11,"add_sos","","add Special Order Set (SOS) constraint to the model.",23,null],[11,"set_objective","","Set the objective function of the model.",23,null],[11,"get","","Query the value of attributes which associated with variable/constraints.",23,null],[11,"set","","Set the value of attributes which associated with variable/constraints.",23,null],[11,"get_values","","Query the value of attributes which associated with variable/constraints.",23,null],[11,"set_values","","Set the value of attributes which associated with variable/constraints.",23,null],[11,"feas_relax","","Modify the model to create a feasibility relaxation.",23,null],[11,"set_pwl_obj","","Set a piecewise-linear objective function of a certain variable in the model.",23,null],[11,"status","","Retrieve the status of the model.",23,null],[11,"get_vars","","Retrieve an iterator of the variables in the model.",23,null],[11,"get_constrs","","Retrieve an iterator of the linear constraints in the model.",23,null],[11,"get_qconstrs","","Retrieve an iterator of the quadratic constraints in the model.",23,null],[11,"get_sos","","Retrieve an iterator of the special order set (SOS) constraints in the model.",23,null],[11,"remove_var","","Remove a variable from the model.",23,null],[11,"remove_constr","","Remove a linear constraint from the model.",23,null],[11,"remove_qconstr","","Remove a quadratic constraint from the model.",23,null],[11,"remove_sos","","Remove a special order set (SOS) cnstraint from the model.",23,null],[11,"set_callback","","a",23,null],[11,"reset_callback","","a",23,null],[11,"get_coeff","","Retrieve a single constant matrix coefficient of the model.",23,null],[11,"set_coeff","","Change a single constant matrix coefficient of the model.",23,null],[11,"set_coeffs","","Change a set of constant matrix coefficients of the model.",23,null],[11,"drop","","",23,null],[0,"attr","","Defines the name of attributes",null,null],[4,"IntAttr","gurobi::attr","",null,null],[13,"NumConstrs","","",10,null],[13,"NumVars","","",10,null],[13,"NumSOS","","",10,null],[13,"NumQConstrs","","",10,null],[13,"NumNZs","","",10,null],[13,"NumQNZs","","",10,null],[13,"NumQCNZs","","",10,null],[13,"NumIntVars","","",10,null],[13,"NumBinVars","","",10,null],[13,"NumPWLObjVars","","",10,null],[13,"ModelSense","","",10,null],[13,"IsMIP","","",10,null],[13,"IsQP","","",10,null],[13,"IsQCP","","",10,null],[13,"Status","","",10,null],[13,"SolCount","","",10,null],[13,"BarIterCount","","",10,null],[13,"VBasis","","",10,null],[13,"CBasis","","",10,null],[13,"PWLObjCvx","","",10,null],[13,"BranchPriority","","",10,null],[13,"VarPreStat","","",10,null],[13,"BoundVioIndex","","",10,null],[13,"BoundSVioIndex","","",10,null],[13,"ConstrVioIndex","","",10,null],[13,"ConstrSVioIndex","","",10,null],[13,"ConstrResidualIndex","","",10,null],[13,"ConstrSResidualIndex","","",10,null],[13,"DualVioIndex","","",10,null],[13,"DualSVioIndex","","",10,null],[13,"DualResidualIndex","","",10,null],[13,"DualSResidualIndex","","",10,null],[13,"ComplVioIndex","","",10,null],[13,"IntVioIndex","","",10,null],[13,"IISMinimal","","",10,null],[13,"IISLB","","",10,null],[13,"IISUB","","",10,null],[13,"IISConstr","","",10,null],[13,"IISSOS","","",10,null],[13,"IISQConstr","","",10,null],[13,"TuneResultCount","","",10,null],[13,"Lazy","","",10,null],[13,"VarHintPri","","",10,null],[4,"DoubleAttr","","",null,null],[13,"Runtime","","",12,null],[13,"ObjCon","","",12,null],[13,"LB","","",12,null],[13,"UB","","",12,null],[13,"Obj","","",12,null],[13,"Start","","",12,null],[13,"PreFixVal","","",12,null],[13,"RHS","","",12,null],[13,"QCRHS","","",12,null],[13,"MaxCoeff","","",12,null],[13,"MinCoeff","","",12,null],[13,"MaxBound","","",12,null],[13,"MinBound","","",12,null],[13,"MaxObjCoeff","","",12,null],[13,"MinObjCoeff","","",12,null],[13,"MaxRHS","","",12,null],[13,"MinRHS","","",12,null],[13,"ObjVal","","",12,null],[13,"ObjBound","","",12,null],[13,"ObjBoundC","","",12,null],[13,"MIPGap","","",12,null],[13,"IterCount","","",12,null],[13,"NodeCount","","",12,null],[13,"X","","",12,null],[13,"RC","","",12,null],[13,"Pi","","",12,null],[13,"QCPi","","",12,null],[13,"Slack","","",12,null],[13,"QCSlack","","",12,null],[13,"BoundVio","","",12,null],[13,"BoundSVio","","",12,null],[13,"BoundVioSum","","",12,null],[13,"BoundSVioSum","","",12,null],[13,"ConstrVio","","",12,null],[13,"ConstrSVio","","",12,null],[13,"ConstrVioSum","","",12,null],[13,"ConstrSVioSum","","",12,null],[13,"ConstrResidual","","",12,null],[13,"ConstrSResidual","","",12,null],[13,"ConstrResidualSum","","",12,null],[13,"ConstrSResidualSum","","",12,null],[13,"DualVio","","",12,null],[13,"DualSVio","","",12,null],[13,"DualVioSum","","",12,null],[13,"DualSVioSum","","",12,null],[13,"DualResidual","","",12,null],[13,"DualSResidual","","",12,null],[13,"DualResidualSum","","",12,null],[13,"DualSResidualSum","","",12,null],[13,"ComplVio","","",12,null],[13,"ComplVioSum","","",12,null],[13,"IntVio","","",12,null],[13,"IntVioSum","","",12,null],[13,"Kappa","","",12,null],[13,"KappaExact","","",12,null],[13,"SAObjLow","","",12,null],[13,"SAObjUp","","",12,null],[13,"SALBLow","","",12,null],[13,"SALBUp","","",12,null],[13,"SARHSLow","","",12,null],[13,"SAUBLow","","",12,null],[13,"SAUBUp","","",12,null],[13,"SARHSUp","","",12,null],[13,"Xn","","",12,null],[13,"FarkasProof","","",12,null],[13,"FarkasDual","","",12,null],[13,"UnbdRay","","",12,null],[13,"PStart","","",12,null],[13,"DStart","","",12,null],[13,"BarX","","",12,null],[13,"VarHintVal","","",12,null],[4,"CharAttr","","",null,null],[13,"VType","","",11,null],[13,"Sense","","",11,null],[13,"QCSense","","",11,null],[4,"StringAttr","","",null,null],[13,"ModelName","","",13,null],[13,"VarName","","",13,null],[13,"ConstrName","","",13,null],[13,"QCName","","",13,null],[0,"callback","gurobi","Defines callback codes. See also\n[the reference of official site](https://www.gurobi.com/documentation/6.5/refman/callback_codes.html).",null,null],[4,"Where","gurobi::callback","Location where the callback called.",null,null],[13,"Polling","","",24,null],[13,"PreSolve","","",24,null],[13,"Simplex","","",24,null],[13,"MIP","","",24,null],[13,"MIPSol","","",24,null],[13,"MIPNode","","",24,null],[13,"Message","","",24,null],[13,"Barrier","","",24,null],[4,"WhatInt","","Name of integer attributes in callback",null,null],[13,"Pre_ColDel","","",25,null],[13,"Pre_RowDel","","",25,null],[13,"Pre_SenChg","","",25,null],[13,"Pre_BndChg","","",25,null],[13,"Pre_CoeChg","","",25,null],[13,"Spx_IsPert","","",25,null],[13,"MIP_SolCnt","","",25,null],[13,"MIP_CutCnt","","",25,null],[13,"MIPSol_SolCnt","","",25,null],[13,"MIP_NodeStatus","","",25,null],[13,"MIP_NodeSolCnt","","",25,null],[13,"BarrierItrCnt","","",25,null],[4,"WhatDouble","","Name of floating attributes in callback",null,null],[13,"Runtime","","",26,null],[13,"Spx_ItrCnt","","",26,null],[13,"Spx_ObjVal","","",26,null],[13,"Spx_PrimInf","","",26,null],[13,"Spx_DualInf","","",26,null],[13,"MIP_ObjBst","","",26,null],[13,"MIP_ObjBnd","","",26,null],[13,"MIP_NodCnt","","",26,null],[13,"MIP_NodLeft","","",26,null],[13,"MIP_ItrCnt","","",26,null],[13,"MIPSol_Obj","","",26,null],[13,"MIPSol_ObjBst","","",26,null],[13,"MIPSol_ObjBnd","","",26,null],[13,"MIPSol_NodCnt","","",26,null],[13,"MIPNode_ObjBst","","",26,null],[13,"MIPNode_ObjBnd","","",26,null],[13,"MIPNode_NodCnt","","",26,null],[13,"Barrier_PrimObj","","",26,null],[13,"Barrier_DualObj","","",26,null],[13,"Barrier_PrimInf","","",26,null],[13,"Barrier_DualInf","","",26,null],[13,"Barrier_Compl","","",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[0,"param","gurobi","Defines the name of parameters",null,null],[4,"IntParam","gurobi::param","",null,null],[13,"SolutionLimit","","",7,null],[13,"Method","","",7,null],[13,"ScaleFlag","","",7,null],[13,"SimplexPricing","","",7,null],[13,"Quad","","",7,null],[13,"NormAdjust","","",7,null],[13,"Sifting","","",7,null],[13,"SiftMethod","","",7,null],[13,"SubMIPNodes","","",7,null],[13,"VarBranch","","",7,null],[13,"Cuts","","",7,null],[13,"CliqueCuts","","",7,null],[13,"CoverCuts","","",7,null],[13,"FlowCoverCuts","","",7,null],[13,"FlowPathCuts","","",7,null],[13,"GUBCoverCuts","","",7,null],[13,"ImpliedCuts","","",7,null],[13,"MIPSepCuts","","",7,null],[13,"MIRCuts","","",7,null],[13,"ModKCuts","","",7,null],[13,"ZeroHalfCuts","","",7,null],[13,"NetworkCuts","","",7,null],[13,"SubMIPCuts","","",7,null],[13,"CutAggPasses","","",7,null],[13,"CutPasses","","",7,null],[13,"GomoryPasses","","",7,null],[13,"NodeMethod","","",7,null],[13,"Presolve","","",7,null],[13,"Aggregate","","",7,null],[13,"IISMethod","","",7,null],[13,"PreCrush","","",7,null],[13,"PreDepRow","","",7,null],[13,"PrePasses","","",7,null],[13,"DisplayInterval","","",7,null],[13,"OutputFlag","","",7,null],[13,"Threads","","",7,null],[13,"BarIterLimit","","",7,null],[13,"Crossover","","",7,null],[13,"CrossoverBasis","","",7,null],[13,"BarCorrectors","","",7,null],[13,"BarOrder","","",7,null],[13,"PumpPasses","","",7,null],[13,"RINS","","",7,null],[13,"Symmetry","","",7,null],[13,"MIPFocus","","",7,null],[13,"NumericFocus","","",7,null],[13,"AggFill","","",7,null],[13,"PreDual","","",7,null],[13,"SolutionNumber","","",7,null],[13,"MinRelNodes","","",7,null],[13,"ZeroObjNodes","","",7,null],[13,"BranchDir","","",7,null],[13,"InfUnbdInfo","","",7,null],[13,"DualReductions","","",7,null],[13,"BarHomogeneous","","",7,null],[13,"PreQLinearize","","",7,null],[13,"MIQCPMethod","","",7,null],[13,"QCPDual","","",7,null],[13,"LogToConsole","","",7,null],[13,"PreSparsify","","",7,null],[13,"PreMIQCPForm","","",7,null],[13,"Seed","","",7,null],[13,"ConcurrentMIP","","",7,null],[13,"ConcurrentJobs","","",7,null],[13,"DistributedMIPJobs","","",7,null],[13,"LazyConstraints","","",7,null],[13,"TuneResults","","",7,null],[13,"TuneTrials","","",7,null],[13,"TuneOutput","","",7,null],[13,"TuneJobs","","",7,null],[13,"Disconnected","","",7,null],[13,"NoRelHeuristic","","",7,null],[13,"UpdateMode","","",7,null],[13,"WorkerPort","","",7,null],[13,"Record","","",7,null],[4,"DoubleParam","","",null,null],[13,"Cutoff","","",8,null],[13,"IterationLimit","","",8,null],[13,"NodeLimit","","",8,null],[13,"TimeLimit","","",8,null],[13,"FeasibilityTol","","",8,null],[13,"IntFeasTol","","",8,null],[13,"MarkowitzTol","","",8,null],[13,"MIPGap","","",8,null],[13,"MIPGapAbs","","",8,null],[13,"OptimalityTol","","",8,null],[13,"PerturbValue","","",8,null],[13,"Heuristics","","",8,null],[13,"ObjScale","","",8,null],[13,"NodefileStart","","",8,null],[13,"BarConvTol","","",8,null],[13,"BarQCPConvTol","","",8,null],[13,"PSDTol","","",8,null],[13,"ImproveStartGap","","",8,null],[13,"ImproveStartNodes","","",8,null],[13,"ImproveStartTime","","",8,null],[13,"FeasRelaxBigM","","",8,null],[13,"TuneTimeLimit","","",8,null],[13,"PreSOS1BigM","","",8,null],[13,"PreSOS2BigM","","",8,null],[4,"StringParam","","",null,null],[13,"LogFile","","",9,null],[13,"NodefileDir","","",9,null],[13,"ResultFile","","",9,null],[13,"WorkerPool","","",9,null],[13,"WorkerPassword","","",9,null],[13,"Dummy","","",9,null],[6,"Result","gurobi","A specialized\n[`Result`](https://doc.rust-lang.org/std/result/enum.Result.html)\ntype for operations in Gurobi Rust API",null,null],[6,"Callback","","",null,null],[17,"INFINITY","","Large number used in C API",null,null],[8,"Proxy","","Provides methods to query/modify attributes associated with certain element.",null,null],[11,"get","","Query the value of attribute.",27,null],[11,"set","","Set the value of attribute.",27,null],[11,"clone","gurobi::callback","",24,null],[11,"fmt","","",24,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"from","","",24,{"inputs":[{"name":"i32"}],"output":{"name":"where"}}],[11,"into","","",24,null],[11,"into","","",25,null],[11,"into","","",26,null],[11,"get","gurobi","Query the value of attribute.",27,null],[11,"set","","Set the value of attribute.",27,null]],"paths":[[4,"Error"],[4,"VarType"],[4,"ConstrSense"],[4,"ModelSense"],[4,"SOSType"],[4,"Status"],[4,"RelaxType"],[4,"IntParam"],[4,"DoubleParam"],[4,"StringParam"],[4,"IntAttr"],[4,"CharAttr"],[4,"DoubleAttr"],[4,"StringAttr"],[3,"CString"],[3,"Env"],[3,"Context"],[3,"Var"],[3,"Constr"],[3,"QConstr"],[3,"SOS"],[3,"LinExpr"],[3,"QuadExpr"],[3,"Model"],[4,"Where"],[4,"WhatInt"],[4,"WhatDouble"],[8,"Proxy"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn&#39;t\nadvance itself. `.peek()` can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"start","core::ops","",42,null],[11,"end","","",43,null],[11,"start","","",44,null],[11,"end","","",44,null],[11,"clone","itertools","",45,null],[11,"new","","Create a new **PadUsing** iterator.",45,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",46,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"new","","Create a new `RepeatCall` from a closure.",47,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"next_back","","",47,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",48,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",49,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",48,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",48,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",48,null],[11,"len","","Return the number of elements in the iterator.",48,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"index","","Return a reference to the element at a given index.",48,null],[11,"fmt","","",48,null],[11,"len","","",48,null],[11,"get_unchecked","","",48,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",49,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",49,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",49,null],[11,"len","","Return the number of elements in the iterator.",49,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"index","","Return a reference to the element at a given index.",49,null],[11,"fmt","","",49,null],[11,"len","","",49,null],[11,"get_unchecked","","",49,null],[11,"clone","","",48,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",49,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"clone","","",52,null],[11,"new","","Create a new `ZipLongest` iterator.",52,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"clone","","",53,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",53,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"clone","","",54,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",54,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",54,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"len","","",54,null],[11,"get_unchecked","","",54,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",55,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",55,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",55,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",55,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",55,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",55,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",55,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",55,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",55,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",55,null],[11,"slice","","Return a sliced iterator.",55,null],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",55,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",55,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",55,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",55,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",55,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",55,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",55,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",55,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",55,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",55,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",55,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",55,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",55,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",55,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",55,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",55,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",55,null],[11,"flatten","","Unravel a nested iterator.",55,null],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",55,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",55,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",55,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",55,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",55,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",55,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",55,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",55,null],[11,"format","","Format all iterator elements, separated by `sep`.",55,null],[11,"fold_results","","Fold `Result` values from an iterator.",55,null],[11,"fold_options","","Fold `Option` values from an iterator.",55,null],[11,"fold1","","Accumulator of the elements in the iterator.",55,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",55,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",55,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",55,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",55,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",55,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",55,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",55,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",55,null],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
initSearch(searchIndex);
