var searchIndex = {};
searchIndex["gurobi"] = {"doc":"This crate provides primitive Rust APIs for Gurobi Optimizer.","items":[[3,"Env","gurobi","Gurobi environment object",null,null],[3,"Model","","Gurobi model object associated with certain environment.",null,null],[3,"Var","","Proxy object of a variables",null,null],[3,"Constr","","Proxy object of a linear constraint",null,null],[3,"QConstr","","Proxy object of a quadratic constraint",null,null],[3,"SOS","","Proxy object of a Special Order Set (SOS) constraint",null,null],[3,"Proxy","","Provides methods to query/modify attributes associated with certain element.",null,null],[3,"Callback","","The context object for Gurobi callback.",null,null],[3,"LinExpr","","Linear expression of variables",null,null],[3,"QuadExpr","","Quadratic expression of variables",null,null],[4,"Error","","The error type for operations in Gurobi Rust API",null,null],[13,"FromAPI","","An exception returned from Gurobi C API",0,null],[13,"NulError","","See https://doc.rust-lang.org/std/ffi/struct.NulError.html",0,null],[13,"InconsitentDims","","Inconsistent argument dimensions",0,null],[4,"VarType","","Type for new variable",null,null],[13,"Binary","","",1,null],[13,"Continuous","","",1,null],[13,"Integer","","",1,null],[4,"ConstrSense","","Sense for new linear/quadratic constraint",null,null],[13,"Equal","","",2,null],[13,"Greater","","",2,null],[13,"Less","","",2,null],[4,"ModelSense","","Sense of new objective function",null,null],[13,"Minimize","","",3,null],[13,"Maximize","","",3,null],[4,"SOSType","","Type of new SOS constraint",null,null],[13,"SOSType1","","",4,null],[13,"SOSType2","","",4,null],[4,"Status","","Status of a model",null,null],[13,"Loaded","","",5,null],[13,"Optimal","","",5,null],[13,"Infeasible","","",5,null],[13,"InfOrUnbd","","",5,null],[13,"Unbounded","","",5,null],[13,"CutOff","","",5,null],[13,"IterationLimit","","",5,null],[13,"NodeLimit","","",5,null],[13,"TimeLimit","","",5,null],[13,"SolutionLimit","","",5,null],[13,"Interrupted","","",5,null],[13,"Numeric","","",5,null],[13,"SubOptimal","","",5,null],[13,"InProgress","","",5,null],[4,"RelaxType","","Type of cost function at feasibility relaxation",null,null],[13,"Linear","","The weighted magnitude of bounds and constraint violations\n($penalty(s\\_i) = w\\_i s\\_i$)",6,null],[13,"Quadratic","","The weighted square of magnitude of bounds and constraint violations\n($penalty(s\\_i) = w\\_i s\\_i\\^2$)",6,null],[13,"Cardinality","","The weighted count of bounds and constraint violations\n($penalty(s\\_i) = w\\_i \\cdot [s\\_i &gt; 0]$)",6,null],[4,"Where","","Location where the callback called",null,null],[13,"Polling","","Periodic polling callback",7,null],[13,"PreSolve","","Currently performing presolve",7,null],[12,"coldel","gurobi::Where","The number of columns removed by presolve to this point.",7,null],[12,"rowdel","","The number of rows removed by presolve to this point.",7,null],[12,"senchg","","The number of constraint senses changed by presolve to this point.",7,null],[12,"bndchg","","The number of variable bounds changed by presolve to this point.",7,null],[12,"coecfg","","The number of coefficients changed by presolve to this point.",7,null],[13,"Simplex","gurobi","Currently in simplex",7,null],[12,"itrcnt","gurobi::Where","Current simplex iteration count.",7,null],[12,"objval","","Current simplex objective value.",7,null],[12,"priminf","","Current primal infeasibility.",7,null],[12,"dualinf","","Current dual infeasibility.",7,null],[12,"ispert","","Is problem current perturbed?",7,null],[13,"MIP","gurobi","Currently in MIP",7,null],[12,"objbst","gurobi::Where","Current best objective.",7,null],[12,"objbnd","","Current best objective bound.",7,null],[12,"nodcnt","","Current explored node count.",7,null],[12,"solcnt","","Current count of feasible solutions found.",7,null],[12,"cutcnt","","Current count of cutting planes applied.",7,null],[12,"nodleft","","Current unexplored node count.",7,null],[12,"itrcnt","","Current simplex iteration count.",7,null],[13,"MIPSol","gurobi","Found a new MIP incumbent",7,null],[12,"obj","gurobi::Where","Objective value for new solution.",7,null],[12,"objbst","","Current best objective.",7,null],[12,"objbnd","","Current best objective bound.",7,null],[12,"nodcnt","","Current explored node count.",7,null],[12,"solcnt","","Current count of feasible solutions found.",7,null],[13,"MIPNode","gurobi","Currently exploring a MIP node",7,null],[12,"status","gurobi::Where","Optimization status of current MIP node (see the Status Code section for further information).",7,null],[12,"objbst","","Current best objective.",7,null],[12,"objbnd","","Current best objective bound.",7,null],[12,"nodcnt","","Current explored node count.",7,null],[12,"solcnt","","Current count of feasible solutions found.",7,null],[13,"Message","gurobi","Printing a log message",7,null],[13,"Barrier","","Currently in barrier.",7,null],[12,"itrcnt","gurobi::Where","Current barrier iteration count.",7,null],[12,"primobj","","Primal objective value for current barrier iterate.",7,null],[12,"dualobj","","Dual objective value for current barrier iterate.",7,null],[12,"priminf","","Primal infeasibility for current barrier iterate.",7,null],[12,"dualinf","","Dual infeasibility for current barrier iterate.",7,null],[12,"compl","","Complementarity violation for current barrier iterate.",7,null],[5,"version","gurobi","Returns the version number of Gurobi",null,null],[11,"new","","Create an environment with log file",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new_client","","Create a client environment on a computer server with log file",8,{"inputs":[{"name":"str"},{"name":"str"},{"name":"i32"},{"name":"str"},{"name":"i32"},{"name":"f64"}],"output":{"name":"result"}}],[11,"new_model","","Create an empty Gurobi model from the environment",8,null],[11,"read_model","","Read a model from a file",8,null],[11,"get","","Query the value of a parameter",8,null],[11,"set","","Set the value of a parameter",8,null],[11,"read_params","","Import a set of parameter values from a file",8,null],[11,"write_params","","Write the set of parameter values to a file",8,null],[11,"message","","Insert a message into log file.",8,null],[11,"drop","","",8,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"into","","",7,null],[11,"get_where","","Retrieve the location where the callback called.",9,null],[11,"get_node_rel","","Retrive node relaxation solution values at the current node.",9,null],[11,"get_solution","","Retrieve values from the current solution vector.",9,null],[11,"set_solution","","Provide a new feasible solution for a MIP model.",9,null],[11,"get_runtime","","Retrieve the elapsed solver runtime [sec].",9,null],[11,"add_cut","","Add a new cutting plane to the MIP model.",9,null],[11,"add_lazy","","Add a new lazy constraint to the MIP model.",9,null],[11,"deref","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"into","","",10,null],[11,"new","","Create an empty linear expression.",10,{"inputs":[],"output":{"name":"self"}}],[11,"add_term","","Add a linear term into the expression.",10,null],[11,"add_constant","","Add a constant into the expression.",10,null],[11,"get_value","","Get actual value of the expression.",10,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"into","","",11,null],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"add_term","","Add a linear term into the expression.",11,null],[11,"add_qterm","","Add a quadratic term into the expression.",11,null],[11,"add_constant","","Add a constant into the expression.",11,null],[11,"get_value","","Get actual value of the expression.",11,null],[11,"into","","",12,null],[11,"into","","",10,null],[11,"add","","",12,null],[11,"add","","",12,null],[11,"sub","","",12,null],[11,"sub","","",12,null],[11,"neg","","",12,null],[11,"mul","","",12,null],[11,"mul","","",12,null],[11,"mul","","",12,null],[11,"add","","",12,null],[11,"add","","",10,null],[11,"add","","",10,null],[11,"add","","",10,null],[11,"sub","","",10,null],[11,"add","","",10,null],[11,"sub","","",10,null],[11,"mul","","",11,null],[11,"add","","",11,null],[11,"sub","","",11,null],[11,"add","","",11,null],[11,"sub","","",11,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"into","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"into","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"into","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"into","","",4,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"status"}}],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"into","","",6,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"get","","Query the value of attribute.",13,null],[11,"set","","Set the value of attribute.",13,null],[11,"remove","","",13,null],[11,"eq","","",13,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"get_type","","",12,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"deref","","",12,null],[11,"deref_mut","","",12,null],[11,"eq","","",12,null],[11,"deref","","",14,null],[11,"deref_mut","","",14,null],[11,"eq","","",14,null],[11,"deref","","",15,null],[11,"deref_mut","","",15,null],[11,"eq","","",15,null],[11,"deref","","",16,null],[11,"deref_mut","","",16,null],[11,"eq","","",16,null],[11,"new","","Create an empty Gurobi model from the environment.",17,{"inputs":[{"name":"str"},{"name":"env"}],"output":{"name":"result"}}],[11,"read_from","","Read a model from a file",17,{"inputs":[{"name":"str"},{"name":"env"}],"output":{"name":"result"}}],[11,"copy","","create a copy of the model",17,null],[11,"fixed","","Create an fixed model associated with the model.",17,null],[11,"relax","","Create an relaxation of the model (undocumented).",17,null],[11,"presolve","","Perform presolve on the model.",17,null],[11,"feasibility","","Create a feasibility model (undocumented).",17,null],[11,"get_env","","Get immutable reference of an environment object associated with the model.",17,null],[11,"get_env_mut","","Get mutable reference of an environment object associated with the model.",17,null],[11,"update","","Apply all modification of the model to process",17,null],[11,"optimize","","Optimize the model synchronously",17,null],[11,"optimize_async","","Optimize the model asynchronously",17,null],[11,"optimize_with_callback","","Optimize the model with a callback function",17,null],[11,"sync","","Wait for a optimization called asynchronously.",17,null],[11,"compute_iis","","Compute an Irreducible Inconsistent Subsystem (IIS) of the model.",17,null],[11,"terminate","","Send a request to the model to terminate the current optimization process.",17,null],[11,"reset","","Reset the model to an unsolved state.",17,null],[11,"tune","","Perform an automated search for parameter settings that improve performance on the model.\nSee also references [on official\nmanual](https://www.gurobi.com/documentation/6.5/refman/parameter_tuning_tool.html#sec:Tuning).",17,null],[11,"get_tune_result","","Prepare to retrieve the results of `tune()`.\nSee also references [on official\nmanual](https://www.gurobi.com/documentation/6.5/refman/parameter_tuning_tool.html#sec:Tuning).",17,null],[11,"get_concurrent_env","","Create/retrieve a concurrent environment for the model",17,null],[11,"discard_concurrent_envs","","Discard all concurrent environments for the model.",17,null],[11,"message","","Insert a message into log file.",17,null],[11,"read","","Import optimization data of the model from a file.",17,null],[11,"write","","Export optimization data of the model to a file.",17,null],[11,"add_var","","add a decision variable to the model.",17,null],[11,"add_vars","","add decision variables to the model.",17,null],[11,"add_constr","","add a linear constraint to the model.",17,null],[11,"add_constrs","","add linear constraints to the model.",17,null],[11,"add_range","","Add a range constraint to the model.",17,null],[11,"add_ranges","","Add range constraints to the model.",17,null],[11,"add_qconstr","","add a quadratic constraint to the model.",17,null],[11,"add_sos","","add Special Order Set (SOS) constraint to the model.",17,null],[11,"set_objective","","Set the objective function of the model.",17,null],[11,"get","","Query the value of attributes which associated with variable/constraints.",17,null],[11,"set","","Set the value of attributes which associated with variable/constraints.",17,null],[11,"get_values","","Query the value of attributes which associated with variable/constraints.",17,null],[11,"set_values","","Set the value of attributes which associated with variable/constraints.",17,null],[11,"feas_relax","","Modify the model to create a feasibility relaxation.",17,null],[11,"set_pwl_obj","","Set a piecewise-linear objective function for the variable.",17,null],[11,"status","","Retrieve the status of the model.",17,null],[11,"get_vars","","Retrieve an iterator of the variables in the model.",17,null],[11,"get_constrs","","Retrieve an iterator of the linear constraints in the model.",17,null],[11,"get_qconstrs","","Retrieve an iterator of the quadratic constraints in the model.",17,null],[11,"get_sos","","Retrieve an iterator of the special order set (SOS) constraints in the model.",17,null],[11,"remove","","Remove a variable from the model.",17,null],[11,"get_coeff","","Retrieve a single constant matrix coefficient of the model.",17,null],[11,"set_coeff","","Change a single constant matrix coefficient of the model.",17,null],[11,"set_coeffs","","Change a set of constant matrix coefficients of the model.",17,null],[11,"drop","","",17,null],[0,"attr","","Defines the name of attributes",null,null],[4,"IntAttr","gurobi::attr","",null,null],[13,"NumConstrs","","",18,null],[13,"NumVars","","",18,null],[13,"NumSOS","","",18,null],[13,"NumQConstrs","","",18,null],[13,"NumNZs","","",18,null],[13,"NumQNZs","","",18,null],[13,"NumQCNZs","","",18,null],[13,"NumIntVars","","",18,null],[13,"NumBinVars","","",18,null],[13,"NumPWLObjVars","","",18,null],[13,"ModelSense","","",18,null],[13,"IsMIP","","",18,null],[13,"IsQP","","",18,null],[13,"IsQCP","","",18,null],[13,"Status","","",18,null],[13,"SolCount","","",18,null],[13,"BarIterCount","","",18,null],[13,"VBasis","","",18,null],[13,"CBasis","","",18,null],[13,"PWLObjCvx","","",18,null],[13,"BranchPriority","","",18,null],[13,"VarPreStat","","",18,null],[13,"BoundVioIndex","","",18,null],[13,"BoundSVioIndex","","",18,null],[13,"ConstrVioIndex","","",18,null],[13,"ConstrSVioIndex","","",18,null],[13,"ConstrResidualIndex","","",18,null],[13,"ConstrSResidualIndex","","",18,null],[13,"DualVioIndex","","",18,null],[13,"DualSVioIndex","","",18,null],[13,"DualResidualIndex","","",18,null],[13,"DualSResidualIndex","","",18,null],[13,"ComplVioIndex","","",18,null],[13,"IntVioIndex","","",18,null],[13,"IISMinimal","","",18,null],[13,"IISLB","","",18,null],[13,"IISUB","","",18,null],[13,"IISConstr","","",18,null],[13,"IISSOS","","",18,null],[13,"IISQConstr","","",18,null],[13,"TuneResultCount","","",18,null],[13,"Lazy","","",18,null],[13,"VarHintPri","","",18,null],[4,"DoubleAttr","","",null,null],[13,"Runtime","","",19,null],[13,"ObjCon","","",19,null],[13,"LB","","",19,null],[13,"UB","","",19,null],[13,"Obj","","",19,null],[13,"Start","","",19,null],[13,"PreFixVal","","",19,null],[13,"RHS","","",19,null],[13,"QCRHS","","",19,null],[13,"MaxCoeff","","",19,null],[13,"MinCoeff","","",19,null],[13,"MaxBound","","",19,null],[13,"MinBound","","",19,null],[13,"MaxObjCoeff","","",19,null],[13,"MinObjCoeff","","",19,null],[13,"MaxRHS","","",19,null],[13,"MinRHS","","",19,null],[13,"ObjVal","","",19,null],[13,"ObjBound","","",19,null],[13,"ObjBoundC","","",19,null],[13,"MIPGap","","",19,null],[13,"IterCount","","",19,null],[13,"NodeCount","","",19,null],[13,"X","","",19,null],[13,"RC","","",19,null],[13,"Pi","","",19,null],[13,"QCPi","","",19,null],[13,"Slack","","",19,null],[13,"QCSlack","","",19,null],[13,"BoundVio","","",19,null],[13,"BoundSVio","","",19,null],[13,"BoundVioSum","","",19,null],[13,"BoundSVioSum","","",19,null],[13,"ConstrVio","","",19,null],[13,"ConstrSVio","","",19,null],[13,"ConstrVioSum","","",19,null],[13,"ConstrSVioSum","","",19,null],[13,"ConstrResidual","","",19,null],[13,"ConstrSResidual","","",19,null],[13,"ConstrResidualSum","","",19,null],[13,"ConstrSResidualSum","","",19,null],[13,"DualVio","","",19,null],[13,"DualSVio","","",19,null],[13,"DualVioSum","","",19,null],[13,"DualSVioSum","","",19,null],[13,"DualResidual","","",19,null],[13,"DualSResidual","","",19,null],[13,"DualResidualSum","","",19,null],[13,"DualSResidualSum","","",19,null],[13,"ComplVio","","",19,null],[13,"ComplVioSum","","",19,null],[13,"IntVio","","",19,null],[13,"IntVioSum","","",19,null],[13,"Kappa","","",19,null],[13,"KappaExact","","",19,null],[13,"SAObjLow","","",19,null],[13,"SAObjUp","","",19,null],[13,"SALBLow","","",19,null],[13,"SALBUp","","",19,null],[13,"SARHSLow","","",19,null],[13,"SAUBLow","","",19,null],[13,"SAUBUp","","",19,null],[13,"SARHSUp","","",19,null],[13,"Xn","","",19,null],[13,"FarkasProof","","",19,null],[13,"FarkasDual","","",19,null],[13,"UnbdRay","","",19,null],[13,"PStart","","",19,null],[13,"DStart","","",19,null],[13,"BarX","","",19,null],[13,"VarHintVal","","",19,null],[4,"CharAttr","","",null,null],[13,"VType","","",20,null],[13,"Sense","","",20,null],[13,"QCSense","","",20,null],[4,"StringAttr","","",null,null],[13,"ModelName","","",21,null],[13,"VarName","","",21,null],[13,"ConstrName","","",21,null],[13,"QCName","","",21,null],[0,"param","gurobi","Defines the name of parameters",null,null],[4,"IntParam","gurobi::param","",null,null],[13,"SolutionLimit","","",22,null],[13,"Method","","",22,null],[13,"ScaleFlag","","",22,null],[13,"SimplexPricing","","",22,null],[13,"Quad","","",22,null],[13,"NormAdjust","","",22,null],[13,"Sifting","","",22,null],[13,"SiftMethod","","",22,null],[13,"SubMIPNodes","","",22,null],[13,"VarBranch","","",22,null],[13,"Cuts","","",22,null],[13,"CliqueCuts","","",22,null],[13,"CoverCuts","","",22,null],[13,"FlowCoverCuts","","",22,null],[13,"FlowPathCuts","","",22,null],[13,"GUBCoverCuts","","",22,null],[13,"ImpliedCuts","","",22,null],[13,"MIPSepCuts","","",22,null],[13,"MIRCuts","","",22,null],[13,"ModKCuts","","",22,null],[13,"ZeroHalfCuts","","",22,null],[13,"NetworkCuts","","",22,null],[13,"SubMIPCuts","","",22,null],[13,"CutAggPasses","","",22,null],[13,"CutPasses","","",22,null],[13,"GomoryPasses","","",22,null],[13,"NodeMethod","","",22,null],[13,"Presolve","","",22,null],[13,"Aggregate","","",22,null],[13,"IISMethod","","",22,null],[13,"PreCrush","","",22,null],[13,"PreDepRow","","",22,null],[13,"PrePasses","","",22,null],[13,"DisplayInterval","","",22,null],[13,"OutputFlag","","",22,null],[13,"Threads","","",22,null],[13,"BarIterLimit","","",22,null],[13,"Crossover","","",22,null],[13,"CrossoverBasis","","",22,null],[13,"BarCorrectors","","",22,null],[13,"BarOrder","","",22,null],[13,"PumpPasses","","",22,null],[13,"RINS","","",22,null],[13,"Symmetry","","",22,null],[13,"MIPFocus","","",22,null],[13,"NumericFocus","","",22,null],[13,"AggFill","","",22,null],[13,"PreDual","","",22,null],[13,"SolutionNumber","","",22,null],[13,"MinRelNodes","","",22,null],[13,"ZeroObjNodes","","",22,null],[13,"BranchDir","","",22,null],[13,"InfUnbdInfo","","",22,null],[13,"DualReductions","","",22,null],[13,"BarHomogeneous","","",22,null],[13,"PreQLinearize","","",22,null],[13,"MIQCPMethod","","",22,null],[13,"QCPDual","","",22,null],[13,"LogToConsole","","",22,null],[13,"PreSparsify","","",22,null],[13,"PreMIQCPForm","","",22,null],[13,"Seed","","",22,null],[13,"ConcurrentMIP","","",22,null],[13,"ConcurrentJobs","","",22,null],[13,"DistributedMIPJobs","","",22,null],[13,"LazyConstraints","","",22,null],[13,"TuneResults","","",22,null],[13,"TuneTrials","","",22,null],[13,"TuneOutput","","",22,null],[13,"TuneJobs","","",22,null],[13,"Disconnected","","",22,null],[13,"NoRelHeuristic","","",22,null],[13,"UpdateMode","","",22,null],[13,"WorkerPort","","",22,null],[13,"Record","","",22,null],[4,"DoubleParam","","",null,null],[13,"Cutoff","","",23,null],[13,"IterationLimit","","",23,null],[13,"NodeLimit","","",23,null],[13,"TimeLimit","","",23,null],[13,"FeasibilityTol","","",23,null],[13,"IntFeasTol","","",23,null],[13,"MarkowitzTol","","",23,null],[13,"MIPGap","","",23,null],[13,"MIPGapAbs","","",23,null],[13,"OptimalityTol","","",23,null],[13,"PerturbValue","","",23,null],[13,"Heuristics","","",23,null],[13,"ObjScale","","",23,null],[13,"NodefileStart","","",23,null],[13,"BarConvTol","","",23,null],[13,"BarQCPConvTol","","",23,null],[13,"PSDTol","","",23,null],[13,"ImproveStartGap","","",23,null],[13,"ImproveStartNodes","","",23,null],[13,"ImproveStartTime","","",23,null],[13,"FeasRelaxBigM","","",23,null],[13,"TuneTimeLimit","","",23,null],[13,"PreSOS1BigM","","",23,null],[13,"PreSOS2BigM","","",23,null],[4,"StringParam","","",null,null],[13,"LogFile","","",24,null],[13,"NodefileDir","","",24,null],[13,"ResultFile","","",24,null],[13,"WorkerPool","","",24,null],[13,"WorkerPassword","","",24,null],[13,"Dummy","","",24,null],[6,"Result","gurobi","A specialized\n[`Result`](https://doc.rust-lang.org/std/result/enum.Result.html)\ntype for operations in Gurobi Rust API",null,null],[17,"INFINITY","","Large number used in C API",null,null],[11,"clone","gurobi::param","",22,null],[11,"fmt","","",22,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"clone","gurobi::attr","",18,null],[11,"fmt","","",18,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"clone","","",21,null],[11,"fmt","","",21,null]],"paths":[[4,"Error"],[4,"VarType"],[4,"ConstrSense"],[4,"ModelSense"],[4,"SOSType"],[4,"Status"],[4,"RelaxType"],[4,"Where"],[3,"Env"],[3,"Callback"],[3,"LinExpr"],[3,"QuadExpr"],[3,"Var"],[3,"Proxy"],[3,"Constr"],[3,"QConstr"],[3,"SOS"],[3,"Model"],[4,"IntAttr"],[4,"DoubleAttr"],[4,"CharAttr"],[4,"StringAttr"],[4,"IntParam"],[4,"DoubleParam"],[4,"StringParam"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn&#39;t\nadvance itself. `.peek()` can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"clone","itertools","",42,null],[11,"new","","Create a new **PadUsing** iterator.",42,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",43,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"new","","Create a new `RepeatCall` from a closure.",44,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",45,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",46,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",45,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",45,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",45,null],[11,"len","","Return the number of elements in the iterator.",45,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"index","","Return a reference to the element at a given index.",45,null],[11,"fmt","","",45,null],[11,"len","","",45,null],[11,"get_unchecked","","",45,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",46,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",46,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",46,null],[11,"len","","Return the number of elements in the iterator.",46,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"index","","Return a reference to the element at a given index.",46,null],[11,"fmt","","",46,null],[11,"len","","",46,null],[11,"get_unchecked","","",46,null],[11,"clone","","",45,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",46,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"clone","","",49,null],[11,"new","","Create a new `ZipLongest` iterator.",49,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"clone","","",50,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",50,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",51,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",51,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"len","","",51,null],[11,"get_unchecked","","",51,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",52,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",52,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",52,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",52,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",52,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",52,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",52,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",52,null],[11,"slice","","Return a sliced iterator.",52,null],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",52,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",52,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",52,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",52,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",52,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",52,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",52,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",52,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",52,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",52,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",52,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",52,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",52,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",52,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",52,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",52,null],[11,"flatten","","Unravel a nested iterator.",52,null],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",52,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",52,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",52,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",52,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",52,null],[11,"format","","Format all iterator elements, separated by `sep`.",52,null],[11,"fold_results","","Fold `Result` values from an iterator.",52,null],[11,"fold_options","","Fold `Option` values from an iterator.",52,null],[11,"fold1","","Accumulator of the elements in the iterator.",52,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",52,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",52,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",52,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",52,null],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["gurobi_sys"] = {"doc":"","items":[[6,"c_int","gurobi_sys","",null,null],[6,"c_double","","",null,null],[6,"c_char","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[3,"GRBenv","","",null,null],[3,"GRBmodel","","",null,null],[3,"GRBsvec","","",null,null],[12,"len","","sparse vector length",0,null],[12,"ind","","indices array of the sparse vector",0,null],[12,"val","","value array of the sparse vector",0,null],[4,"IntParam","","",null,null],[13,"SolutionLimit","","",1,null],[13,"Method","","",1,null],[13,"ScaleFlag","","",1,null],[13,"SimplexPricing","","",1,null],[13,"Quad","","",1,null],[13,"NormAdjust","","",1,null],[13,"Sifting","","",1,null],[13,"SiftMethod","","",1,null],[13,"SubMIPNodes","","",1,null],[13,"VarBranch","","",1,null],[13,"Cuts","","",1,null],[13,"CliqueCuts","","",1,null],[13,"CoverCuts","","",1,null],[13,"FlowCoverCuts","","",1,null],[13,"FlowPathCuts","","",1,null],[13,"GUBCoverCuts","","",1,null],[13,"ImpliedCuts","","",1,null],[13,"MIPSepCuts","","",1,null],[13,"MIRCuts","","",1,null],[13,"ModKCuts","","",1,null],[13,"ZeroHalfCuts","","",1,null],[13,"NetworkCuts","","",1,null],[13,"SubMIPCuts","","",1,null],[13,"CutAggPasses","","",1,null],[13,"CutPasses","","",1,null],[13,"GomoryPasses","","",1,null],[13,"NodeMethod","","",1,null],[13,"Presolve","","",1,null],[13,"Aggregate","","",1,null],[13,"IISMethod","","",1,null],[13,"PreCrush","","",1,null],[13,"PreDepRow","","",1,null],[13,"PrePasses","","",1,null],[13,"DisplayInterval","","",1,null],[13,"OutputFlag","","",1,null],[13,"Threads","","",1,null],[13,"BarIterLimit","","",1,null],[13,"Crossover","","",1,null],[13,"CrossoverBasis","","",1,null],[13,"BarCorrectors","","",1,null],[13,"BarOrder","","",1,null],[13,"PumpPasses","","",1,null],[13,"RINS","","",1,null],[13,"Symmetry","","",1,null],[13,"MIPFocus","","",1,null],[13,"NumericFocus","","",1,null],[13,"AggFill","","",1,null],[13,"PreDual","","",1,null],[13,"SolutionNumber","","",1,null],[13,"MinRelNodes","","",1,null],[13,"ZeroObjNodes","","",1,null],[13,"BranchDir","","",1,null],[13,"InfUnbdInfo","","",1,null],[13,"DualReductions","","",1,null],[13,"BarHomogeneous","","",1,null],[13,"PreQLinearize","","",1,null],[13,"MIQCPMethod","","",1,null],[13,"QCPDual","","",1,null],[13,"LogToConsole","","",1,null],[13,"PreSparsify","","",1,null],[13,"PreMIQCPForm","","",1,null],[13,"Seed","","",1,null],[13,"ConcurrentMIP","","",1,null],[13,"ConcurrentJobs","","",1,null],[13,"DistributedMIPJobs","","",1,null],[13,"LazyConstraints","","",1,null],[13,"TuneResults","","",1,null],[13,"TuneTrials","","",1,null],[13,"TuneOutput","","",1,null],[13,"TuneJobs","","",1,null],[13,"Disconnected","","",1,null],[13,"NoRelHeuristic","","",1,null],[13,"UpdateMode","","",1,null],[13,"WorkerPort","","",1,null],[13,"Record","","",1,null],[4,"DoubleParam","","",null,null],[13,"Cutoff","","",2,null],[13,"IterationLimit","","",2,null],[13,"NodeLimit","","",2,null],[13,"TimeLimit","","",2,null],[13,"FeasibilityTol","","",2,null],[13,"IntFeasTol","","",2,null],[13,"MarkowitzTol","","",2,null],[13,"MIPGap","","",2,null],[13,"MIPGapAbs","","",2,null],[13,"OptimalityTol","","",2,null],[13,"PerturbValue","","",2,null],[13,"Heuristics","","",2,null],[13,"ObjScale","","",2,null],[13,"NodefileStart","","",2,null],[13,"BarConvTol","","",2,null],[13,"BarQCPConvTol","","",2,null],[13,"PSDTol","","",2,null],[13,"ImproveStartGap","","",2,null],[13,"ImproveStartNodes","","",2,null],[13,"ImproveStartTime","","",2,null],[13,"FeasRelaxBigM","","",2,null],[13,"TuneTimeLimit","","",2,null],[13,"PreSOS1BigM","","",2,null],[13,"PreSOS2BigM","","",2,null],[4,"StringParam","","",null,null],[13,"LogFile","","",3,null],[13,"NodefileDir","","",3,null],[13,"ResultFile","","",3,null],[13,"WorkerPool","","",3,null],[13,"WorkerPassword","","",3,null],[13,"Dummy","","",3,null],[4,"IntAttr","","",null,null],[13,"NumConstrs","","",4,null],[13,"NumVars","","",4,null],[13,"NumSOS","","",4,null],[13,"NumQConstrs","","",4,null],[13,"NumNZs","","",4,null],[13,"NumQNZs","","",4,null],[13,"NumQCNZs","","",4,null],[13,"NumIntVars","","",4,null],[13,"NumBinVars","","",4,null],[13,"NumPWLObjVars","","",4,null],[13,"ModelSense","","",4,null],[13,"IsMIP","","",4,null],[13,"IsQP","","",4,null],[13,"IsQCP","","",4,null],[13,"Status","","",4,null],[13,"SolCount","","",4,null],[13,"BarIterCount","","",4,null],[13,"VBasis","","",4,null],[13,"CBasis","","",4,null],[13,"PWLObjCvx","","",4,null],[13,"BranchPriority","","",4,null],[13,"VarPreStat","","",4,null],[13,"BoundVioIndex","","",4,null],[13,"BoundSVioIndex","","",4,null],[13,"ConstrVioIndex","","",4,null],[13,"ConstrSVioIndex","","",4,null],[13,"ConstrResidualIndex","","",4,null],[13,"ConstrSResidualIndex","","",4,null],[13,"DualVioIndex","","",4,null],[13,"DualSVioIndex","","",4,null],[13,"DualResidualIndex","","",4,null],[13,"DualSResidualIndex","","",4,null],[13,"ComplVioIndex","","",4,null],[13,"IntVioIndex","","",4,null],[13,"IISMinimal","","",4,null],[13,"IISLB","","",4,null],[13,"IISUB","","",4,null],[13,"IISConstr","","",4,null],[13,"IISSOS","","",4,null],[13,"IISQConstr","","",4,null],[13,"TuneResultCount","","",4,null],[13,"Lazy","","",4,null],[13,"VarHintPri","","",4,null],[4,"CharAttr","","",null,null],[13,"VType","","",5,null],[13,"Sense","","",5,null],[13,"QCSense","","",5,null],[4,"DoubleAttr","","",null,null],[13,"Runtime","","",6,null],[13,"ObjCon","","",6,null],[13,"LB","","",6,null],[13,"UB","","",6,null],[13,"Obj","","",6,null],[13,"Start","","",6,null],[13,"PreFixVal","","",6,null],[13,"RHS","","",6,null],[13,"QCRHS","","",6,null],[13,"MaxCoeff","","",6,null],[13,"MinCoeff","","",6,null],[13,"MaxBound","","",6,null],[13,"MinBound","","",6,null],[13,"MaxObjCoeff","","",6,null],[13,"MinObjCoeff","","",6,null],[13,"MaxRHS","","",6,null],[13,"MinRHS","","",6,null],[13,"ObjVal","","",6,null],[13,"ObjBound","","",6,null],[13,"ObjBoundC","","",6,null],[13,"MIPGap","","",6,null],[13,"IterCount","","",6,null],[13,"NodeCount","","",6,null],[13,"X","","",6,null],[13,"RC","","",6,null],[13,"Pi","","",6,null],[13,"QCPi","","",6,null],[13,"Slack","","",6,null],[13,"QCSlack","","",6,null],[13,"BoundVio","","",6,null],[13,"BoundSVio","","",6,null],[13,"BoundVioSum","","",6,null],[13,"BoundSVioSum","","",6,null],[13,"ConstrVio","","",6,null],[13,"ConstrSVio","","",6,null],[13,"ConstrVioSum","","",6,null],[13,"ConstrSVioSum","","",6,null],[13,"ConstrResidual","","",6,null],[13,"ConstrSResidual","","",6,null],[13,"ConstrResidualSum","","",6,null],[13,"ConstrSResidualSum","","",6,null],[13,"DualVio","","",6,null],[13,"DualSVio","","",6,null],[13,"DualVioSum","","",6,null],[13,"DualSVioSum","","",6,null],[13,"DualResidual","","",6,null],[13,"DualSResidual","","",6,null],[13,"DualResidualSum","","",6,null],[13,"DualSResidualSum","","",6,null],[13,"ComplVio","","",6,null],[13,"ComplVioSum","","",6,null],[13,"IntVio","","",6,null],[13,"IntVioSum","","",6,null],[13,"Kappa","","",6,null],[13,"KappaExact","","",6,null],[13,"SAObjLow","","",6,null],[13,"SAObjUp","","",6,null],[13,"SALBLow","","",6,null],[13,"SALBUp","","",6,null],[13,"SARHSLow","","",6,null],[13,"SAUBLow","","",6,null],[13,"SAUBUp","","",6,null],[13,"SARHSUp","","",6,null],[13,"Xn","","",6,null],[13,"FarkasProof","","",6,null],[13,"FarkasDual","","",6,null],[13,"UnbdRay","","",6,null],[13,"PStart","","",6,null],[13,"DStart","","",6,null],[13,"BarX","","",6,null],[13,"VarHintVal","","",6,null],[4,"StringAttr","","",null,null],[13,"ModelName","","",7,null],[13,"VarName","","",7,null],[13,"ConstrName","","",7,null],[13,"QCName","","",7,null],[5,"GRBloadenv","","",null,null],[5,"GRBloadclientenv","","",null,null],[5,"GRBfreeenv","","",null,null],[5,"GRBgetconcurrentenv","","",null,null],[5,"GRBdiscardconcurrentenvs","","",null,null],[5,"GRBnewmodel","","",null,null],[5,"GRBcopymodel","","",null,null],[5,"GRBaddconstr","","",null,null],[5,"GRBaddconstrs","","",null,null],[5,"GRBaddqconstr","","",null,null],[5,"GRBaddqpterms","","",null,null],[5,"GRBaddrangeconstr","","",null,null],[5,"GRBaddrangeconstrs","","",null,null],[5,"GRBaddsos","","",null,null],[5,"GRBaddvar","","",null,null],[5,"GRBaddvars","","",null,null],[5,"GRBchgcoeffs","","",null,null],[5,"GRBdelvars","","",null,null],[5,"GRBdelconstrs","","",null,null],[5,"GRBdelq","","",null,null],[5,"GRBdelqconstrs","","",null,null],[5,"GRBdelsos","","",null,null],[5,"GRBsetpwlobj","","",null,null],[5,"GRBupdatemodel","","",null,null],[5,"GRBfreemodel","","",null,null],[5,"GRBoptimize","","",null,null],[5,"GRBoptimizeasync","","",null,null],[5,"GRBcomputeIIS","","",null,null],[5,"GRBfeasrelax","","",null,null],[5,"GRBfixedmodel","","",null,null],[5,"GRBrelaxmodel","","",null,null],[5,"GRBpresolvemodel","","",null,null],[5,"GRBfeasibility","","",null,null],[5,"GRBresetmodel","","",null,null],[5,"GRBsync","","",null,null],[5,"GRBgetcoeff","","",null,null],[5,"GRBgetconstrbyname","","",null,null],[5,"GRBgetconstrs","","",null,null],[5,"GRBgetenv","","",null,null],[5,"GRBgetpwlobj","","",null,null],[5,"GRBgetq","","",null,null],[5,"GRBgetqconstr","","",null,null],[5,"GRBgetsos","","",null,null],[5,"GRBgetvarbyname","","",null,null],[5,"GRBgetvars","","",null,null],[5,"GRBreadmodel","","",null,null],[5,"GRBread","","",null,null],[5,"GRBwrite","","",null,null],[5,"GRBgetattrinfo","","",null,null],[5,"GRBgetintattr","","",null,null],[5,"GRBgetdblattr","","",null,null],[5,"GRBgetstrattr","","",null,null],[5,"GRBsetintattr","","",null,null],[5,"GRBsetdblattr","","",null,null],[5,"GRBsetstrattr","","",null,null],[5,"GRBgetintattrelement","","",null,null],[5,"GRBgetdblattrelement","","",null,null],[5,"GRBgetcharattrelement","","",null,null],[5,"GRBgetstrattrelement","","",null,null],[5,"GRBsetintattrelement","","",null,null],[5,"GRBsetdblattrelement","","",null,null],[5,"GRBsetcharattrelement","","",null,null],[5,"GRBsetstrattrelement","","",null,null],[5,"GRBgetintattrarray","","",null,null],[5,"GRBgetdblattrarray","","",null,null],[5,"GRBgetcharattrarray","","",null,null],[5,"GRBgetstrattrarray","","",null,null],[5,"GRBsetintattrarray","","",null,null],[5,"GRBsetdblattrarray","","",null,null],[5,"GRBsetcharattrarray","","",null,null],[5,"GRBsetstrattrarray","","",null,null],[5,"GRBgetintattrlist","","",null,null],[5,"GRBgetdblattrlist","","",null,null],[5,"GRBgetcharattrlist","","",null,null],[5,"GRBgetstrattrlist","","",null,null],[5,"GRBsetintattrlist","","",null,null],[5,"GRBsetdblattrlist","","",null,null],[5,"GRBsetcharattrlist","","",null,null],[5,"GRBsetstrattrlist","","",null,null],[5,"GRBtunemodel","","",null,null],[5,"GRBgettuneresult","","",null,null],[5,"GRBgetdblparam","","",null,null],[5,"GRBgetintparam","","",null,null],[5,"GRBgetstrparam","","",null,null],[5,"GRBsetdblparam","","",null,null],[5,"GRBsetintparam","","",null,null],[5,"GRBsetstrparam","","",null,null],[5,"GRBgetdblparaminfo","","",null,null],[5,"GRBgetintparaminfo","","",null,null],[5,"GRBgetstrparaminfo","","",null,null],[5,"GRBreadparams","","",null,null],[5,"GRBwriteparams","","",null,null],[5,"GRBmsg","","",null,null],[5,"GRBsetcallbackfunc","","",null,null],[5,"GRBgetcallbackfunc","","",null,null],[5,"GRBcbget","","",null,null],[5,"GRBversion","","",null,null],[5,"GRBcbcut","","",null,null],[5,"GRBcblazy","","",null,null],[5,"GRBcbsolution","","",null,null],[5,"GRBterminate","","",null,null],[5,"GRBgeterrormsg","","",null,null],[5,"GRBFSolve","","",null,null],[5,"GRBBSolve","","",null,null],[5,"GRBBinvColj","","",null,null],[5,"GRBBinvRowi","","",null,null],[5,"GRBgetBasisHead","","",null,null],[6,"c_str","","",null,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null]],"paths":[[3,"GRBsvec"],[4,"IntParam"],[4,"DoubleParam"],[4,"StringParam"],[4,"IntAttr"],[4,"CharAttr"],[4,"DoubleAttr"],[4,"StringAttr"]]};
initSearch(searchIndex);
